# This compose file is compatible with Compose itself, it might need some
# adjustments to run properly with stack.

version: '3'
services:
  synapse:
    container_name: synapse
    hostname: ${MATRIX_HOSTNAME}
    build:
        context: ../..
        dockerfile: docker/Dockerfile
    image: docker.io/matrixdotorg/synapse:latest
    restart: unless-stopped
    environment:
      - SYNAPSE_SERVER_NAME=matrix.mysammich.com
      - SYNAPSE_REPORT_STATS=yes
      - SYNAPSE_NO_TLS=true
      - SYNAPSE_ENABLE_REGISTRATION=no
        #- SYNAPSE_CONFIG_PATH=/config
        #- SYNAPSE_LOG_LEVEL=INFO
      - SYNAPSE_REGISTRATION_SHARED_SECRET=${REG_SHARED_SECRET}
      - POSTGRES_DB=synapse
      - POSTGRES_HOST=db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - synapse-data:/data
    depends_on:
      - db
    # In order to expose Synapse, remove one of the following, you might for
    # instance expose the TLS port directly:
    #ports:
    #  - 8448:8448/tcp
    networks:
      - web
      - backend
    # ... or use a reverse proxy, here is an example for traefik:
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:${MATRIX_HOSTNAME}"
      - "traefik.port=8008"
      - "traefik.docker.network=web"

  db:
    container_name: postgres
    image: docker.io/postgres:10-alpine
    # Change that password, of course!
    environment:
      - POSTGRES_DB=synapse
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend
    labels:
      - "traefik.enable=false"

volumes:
  synapse-data:
  postgres-data:

networks:
  web:
    external: true
  backend:
